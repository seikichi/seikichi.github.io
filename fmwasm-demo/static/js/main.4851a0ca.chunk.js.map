{"version":3,"sources":["serviceWorker.ts","index.tsx","App.tsx"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","useState","query","setQuery","index","setIndex","positions","setPositions","results","setResults","onQueryChange","useCallback","e","target","value","useEffect","a","FMIndex","fetch","response","arrayBuffer","buffer","from","Uint8Array","alert","json","length","search","start","end","next","i","Math","min","loc","locate","id","j","text","previous_string","push","className","href","type","onChange","map","key","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCID,WAAgB,IAAD,EACFC,mBAAS,IADP,mBACrBC,EADqB,KACdC,EADc,OAEFF,mBAAS,MAFP,mBAErBG,EAFqB,KAEdC,EAFc,OAGMJ,mBAAS,IAHf,mBAGrBK,EAHqB,KAGVC,EAHU,OAIEN,mBAAS,IAJX,mBAIrBO,EAJqB,KAIZC,EAJY,KAMtBC,EAAgBC,uBAAY,SAACC,GAAD,OAAYT,EAASS,EAAEC,OAAOC,SAAQ,CAACX,IA+CzE,OA9CAY,qBAAU,WACR,sBAAC,kCAAAC,EAAA,+EAE6B,6BAF7B,uBAEWC,EAFX,EAEWA,QAFX,SAG0BC,MAAM,oBAHhC,cAGSC,EAHT,iBAIwBA,EAASC,cAJjC,QAISC,EAJT,OAKGhB,EAASY,EAAQK,KAAK,IAAIC,WAAWF,KALxC,kDAOGG,MAAM,UAAD,cAPR,yDAAD,KAUC,IAEHT,qBAAU,WACR,sBAAC,4BAAAC,EAAA,+EAE0BE,MAAM,iBAFhC,cAESC,EAFT,YAGGZ,EAHH,SAGsBY,EAASM,OAH/B,oFAKGD,MAAM,UAAD,cALR,yDAAD,KAQC,IAEHT,qBAAU,WACR,GAAKX,GAA8B,IAArBE,EAAUoB,QAA0B,KAAVxB,EAAxC,CAMA,IAPc,MAKSE,EAAMuB,OAAOzB,GAA5B0B,EALM,EAKNA,MAAOC,EALD,EAKCA,IACTC,EAAO,GACJC,EAAIH,EAAOG,EAAIC,KAAKC,IAAIJ,EAAKD,EAAQ,IAAKG,IAAK,CAGtD,IAFA,IAAMG,EAAM9B,EAAM+B,OAAOJ,GACrBK,EAAK,GACAC,EAAI,EAAGA,EAAI/B,EAAUoB,OAAQW,IACpC,GAAI/B,EAAU+B,GAAG,IAAMH,EAAK,CAC1BE,EAAK9B,EAAU+B,GAAG,GAClB,MAGJ,IAAMC,EAAI,aAASlC,EAAMmC,gBAAgBR,EAAG,KAAlC,OAAwC7B,EAAxC,OACV4B,EAAKU,KAAK,CAAEJ,KAAIE,SAElB7B,EAAWqB,MACV,CAAC1B,EAAOE,EAAWJ,IAGpB,yBAAKuC,UAAU,OACb,2BACE,uBAAGC,KAAK,iCAAR,oBADF,2TAKA,2BAAOC,KAAK,OAAO7B,MAAOZ,EAAO0C,SAAUlC,IAE3C,4BACGF,EAAQqC,KAAI,YAAiB,IAAfT,EAAc,EAAdA,GAAIE,EAAU,EAAVA,KACjB,OACE,wBAAIQ,IAAG,UAAKV,EAAL,YAAWE,IACfA,EADH,IAEG,uBAAGI,KAAI,sDAAiDN,EAAjD,UAAP,gBAFH,YDrEI,MAASW,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4851a0ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import 'whatwg-fetch';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\n\ninterface SearchResult {\n  id: string;\n  text: string;\n}\n\nexport default function App() {\n  const [query, setQuery] = useState('');\n  const [index, setIndex] = useState(null as any);\n  const [positions, setPositions] = useState([] as [string, string][]);\n  const [results, setResults] = useState([] as SearchResult[]);\n\n  const onQueryChange = useCallback((e: any) => setQuery(e.target.value), [setQuery]);\n  useEffect(() => {\n    (async () => {\n      try {\n        const { FMIndex } = await import(\"@seikichi/fmwasm\");\n        const response = await fetch(\"./soseki.bincode\")\n        const buffer = await response.arrayBuffer();\n        setIndex(FMIndex.from(new Uint8Array(buffer)));\n      } catch (e) {\n        alert(`Error: ${e}`);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const response = await fetch(\"./soseki.json\")\n        setPositions(await response.json());\n      } catch (e) {\n        alert(`Error: ${e}`);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (!index || positions.length === 0 || query === \"\") {\n      return;\n    }\n\n    const { start, end } = index.search(query);\n    const next = [];\n    for (let i = start; i < Math.min(end, start + 20); i++) {\n      const loc = index.locate(i);\n      let id = \"\";\n      for (let j = 0; j < positions.length; j++) {\n        if (positions[j][0] >= loc) {\n          id = positions[j][1];\n          break;\n        }\n      }\n      const text = `...${index.previous_string(i, 10)}${query}...`;\n      next.push({ id, text });\n    }\n    setResults(next);\n  }, [index, positions, query]);\n\n  return (\n    <div className=\"App\">\n      <p>\n        <a href=\"://github.com/seikichi/fmwasm\">@seikichi/fmwasm</a>\n        で作った FM-index を wasm で利用してブラウザで全文検索するデモ。\n        青空文庫の夏目漱石の小説を検索します (表示数最大 20)。\n      </p>\n      <input type=\"text\" value={query} onChange={onQueryChange} />\n\n      <ul>\n        {results.map(({id, text}) => {\n          return (\n            <li key={`${id}-${text}`}>\n              {text}\n              (<a href={`https://www.aozora.gr.jp/cards/000148/files/${id}.html`}>本文</a>)\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n"],"sourceRoot":""}